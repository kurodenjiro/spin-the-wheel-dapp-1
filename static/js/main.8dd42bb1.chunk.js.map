{"version":3,"sources":["components/form-fields.tsx","components/DisplayBalance.tsx","components/Header.tsx","assets/spin-to-win.png","utils/time.ts","components/Wheel.tsx","utils/random.ts","utils/collections.ts","pages/CasinoWheelPage.tsx","App.tsx","getWeb3.ts","reportWebVitals.ts","index.tsx"],"names":["TextField","label","append","props","useField","field","meta","Form","Group","Label","InputGroup","Control","type","placeholder","isInvalid","touched","error","disabled","Append","Feedback","FormButton","children","isSubmitting","useFormikContext","Button","Spinner","size","animation","DisplayBalance","web3","useContext","Web3Context","account","AccountContext","balance","useQuery","eth","getBalance","refetchOnWindowFocus","isLoading","isError","isIdle","fromWei","data","Header","Navbar","bg","variant","sticky","Brand","Nav","className","Text","sleep","ms","Promise","resolve","setTimeout","SECTOR_COLORS","Wheel","forwardRef","ref","prizes","radius","width","sectorSize","length","useState","angle","setAngle","duration","setDuration","useImperativeHandle","spinToIndex","index","desiredAngle","Math","random","min","max","ceil","floor","a","strokeColor","style","overflow","position","height","zIndex","x","fill","transition","transform","strokeWidth","map","prize","i","color","stroke","d","getSectorPath","y","fontSize","cx","cy","r","xlinkHref","spinToWinImg","a1","a2","degtorad","PI","cr","cos","sin","shuffleExceptAt","array","before","slice","after","shuffled","_","shuffle","element","casinoWheelSchema","yup","amount","moreThan","required","CasinoWheelPage","casino","CasinoContext","queryClient","useQueryClient","setPrizes","wheelRef","useRef","useEffect","methods","getPrizes","call","then","result","console","log","subscription","events","WheelSpin","returnValues","wonPrizeIndex","BN","toNumber","shuffledPrizes","current","invalidateQueries","unsubscribe","Container","maxWidth","Card","as","Body","initialValues","validationSchema","onSubmit","resetForm","spinWheel","send","from","value","toWei","name","createContext","undefined","App","web3Loader","reject","window","addEventListener","ethereum","Web3","enable","provider","providers","HttpProvider","getAccounts","accounts","Contract","Casino","abi","isSuccess","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","QueryClient","ReactDOM","render","StrictMode","basename","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.8dd42bb1.chunk.js","sourcesContent":["import { FieldHookConfig, useField, useFormikContext } from 'formik'\r\nimport { FC, ReactElement } from 'react'\r\nimport { Button, Form, InputGroup, Spinner } from 'react-bootstrap'\r\n\r\ntype TextFieldProps = FieldHookConfig<string> & {\r\n  label: string\r\n  append?: ReactElement\r\n}\r\n\r\nexport const TextField: FC<TextFieldProps> = ({ label, append, ...props }) => {\r\n  const [field, meta] = useField(props)\r\n  return (\r\n    <Form.Group>\r\n      <Form.Label>{label}</Form.Label>\r\n      <InputGroup>\r\n        <Form.Control\r\n          type=\"text\" {...field}\r\n          placeholder={props.placeholder}\r\n          isInvalid={meta.touched && meta.error != null}\r\n          \r\n          disabled={true}\r\n        />\r\n        {append && <InputGroup.Append>{append}</InputGroup.Append>}\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          {meta.error}\r\n        </Form.Control.Feedback>\r\n      </InputGroup>\r\n    </Form.Group>\r\n  )\r\n}\r\n\r\n\r\nexport const FormButton: FC = ({ children }) => {\r\n  const { isSubmitting } = useFormikContext()\r\n  return (\r\n    <Button\r\n      type=\"submit\"\r\n      disabled={isSubmitting}\r\n    >\r\n      {isSubmitting && <Spinner size=\"sm\" animation=\"grow\" />}\r\n      {' '}\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n","import { FC, useContext } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport { fromWei } from 'web3-utils'\r\nimport { AccountContext, Web3Context } from '../App'\r\n\r\nexport const DisplayBalance: FC = () => {\r\n  const web3 = useContext(Web3Context)\r\n  const account = useContext(AccountContext)\r\n\r\n  const balance = useQuery(['balance', account], () => {\r\n    return web3.eth.getBalance(account)\r\n  }, {\r\n    // Metamask steals window focus. Don't refetch automatically.\r\n    refetchOnWindowFocus: false,\r\n  })\r\n\r\n  if (balance.isLoading) {\r\n    return <div>Loading balance...</div>\r\n  }\r\n\r\n  if (balance.isError) {\r\n    return <div>Error getting balance!</div>\r\n  }\r\n\r\n  if (balance.isIdle) {\r\n    return <div>Idle...</div>\r\n  }\r\n\r\n  return <div>Your balance: {fromWei(balance.data)}</div>\r\n}\r\n","import { FC, useContext } from 'react'\r\nimport { Nav, Navbar } from 'react-bootstrap'\r\nimport { AccountContext } from '../App'\r\nimport { DisplayBalance } from './DisplayBalance'\r\n\r\nexport const Header: FC = () => {\r\n  const account = useContext(AccountContext)\r\n\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" sticky=\"top\">\r\n      <Navbar.Brand>Casino</Navbar.Brand>\r\n      <Nav className=\"ml-auto\">\r\n        <Navbar.Text>Your account: {account}</Navbar.Text>\r\n        <span className=\"ml-4\" />\r\n        <Navbar.Text><DisplayBalance /></Navbar.Text>\r\n      </Nav>\r\n    </Navbar>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/spin-to-win.46bc60d5.png\";","export function sleep(ms: number) {\r\n  return new Promise(resolve => setTimeout(resolve, ms))\r\n}\r\n","import { forwardRef, useImperativeHandle, useState } from 'react'\r\nimport { CaretDownFill } from 'react-bootstrap-icons'\r\nimport spinToWinImg from '../assets/spin-to-win.png'\r\nimport { randomInt } from '../utils/random'\r\nimport { sleep } from '../utils/time'\r\n\r\ntype Props = {\r\n  prizes: string[]\r\n}\r\n\r\nexport type WheelRef = {\r\n  spinToIndex: (index: number, duration: number) => Promise<void>\r\n}\r\n\r\nconst SECTOR_COLORS = [\r\n  '#19C0FC',\r\n  '#EC0E24',\r\n  '#28B046',\r\n  '#0453EA',\r\n  '#EE2F0B',\r\n  '#881391',\r\n]\r\n\r\nexport const Wheel = forwardRef<WheelRef, Props>(({ prizes }, ref) => {\r\n  const radius = 250\r\n  const width = radius * 2, height = radius * 2\r\n  const sectorSize = 360 / prizes.length\r\n\r\n  const [angle, setAngle] = useState(0)\r\n  const [duration, setDuration] = useState(0) // seconds\r\n\r\n  useImperativeHandle(ref, () => ({\r\n    async spinToIndex(index, duration) {\r\n      const desiredAngle = sectorSize * index - sectorSize / 2 +\r\n        Math.random() * sectorSize + 360 * randomInt(5, 8)\r\n      // Reset angle (angle % 360 == 0) and add desiredAngle\r\n      setAngle(a => a - a % 360 + 360 + desiredAngle)\r\n      setDuration(duration)\r\n      await sleep(duration * 1000)\r\n    },\r\n  }))\r\n\r\n  const arrowSize = radius / 6\r\n  const outlineCircleStrokeWidth = 15\r\n  const strokeColor = '#F1D585'\r\n  return (\r\n    <div style={{ overflow: 'hidden', position: 'relative', width, height }}>\r\n      <div style={{ position: 'absolute', zIndex: 2 }}>\r\n        <CaretDownFill\r\n          width={width}\r\n          x={radius}\r\n          fill={strokeColor}\r\n          size={arrowSize}\r\n        />\r\n      </div>\r\n      <svg\r\n        width={width} height={height}\r\n        style={{\r\n          transition: `all ${duration}s cubic-bezier(0.3,-0.05,0,1)`,\r\n          transform: `rotate(${-angle}deg)`,\r\n        }}\r\n      >\r\n        <g transform={`translate(${radius}, ${radius})`}>\r\n          <g strokeWidth=\"2\">\r\n            {prizes.map((prize, i) => {\r\n              const color = SECTOR_COLORS[i % SECTOR_COLORS.length]\r\n              return (\r\n                <g\r\n                  key={`${prize}${i}`}\r\n                  transform={`rotate(${-90 + i * sectorSize})`}\r\n                >\r\n                  <path\r\n                    stroke={strokeColor}\r\n                    strokeWidth=\"2\"\r\n                    fill={color}\r\n                    d={getSectorPath(0, 0, radius, -sectorSize / 2, sectorSize - sectorSize / 2)}\r\n                  />\r\n                  <text\r\n                    x={radius * 0.5}\r\n                    y={radius / 8 * 0.4}  // Relative to fontSize\r\n                    fontSize={radius / 8}\r\n                    fill=\"white\"\r\n                  >\r\n                    {prize}\r\n                  </text>\r\n                </g>\r\n              )\r\n            })}\r\n          </g>\r\n          <circle\r\n            cx=\"0\"\r\n            cy=\"0\"\r\n            r={radius - outlineCircleStrokeWidth / 2}\r\n            strokeWidth={outlineCircleStrokeWidth}\r\n            stroke={strokeColor}\r\n            fill=\"transparent\"\r\n          />\r\n          <image\r\n            xlinkHref={spinToWinImg}\r\n            width={width}\r\n            height={height}\r\n            x={-radius}\r\n            y={-radius}\r\n            transform=\"scale(0.4)\"\r\n          />\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  )\r\n})\r\n\r\nfunction getSectorPath(x: number, y: number, radius: number, a1: number, a2: number) {\r\n  const degtorad = Math.PI / 180\r\n  const cr = radius - 5\r\n  const cx1 = (Math.cos(degtorad * a2) * cr) + x\r\n  const cy1 = (-Math.sin(degtorad * a2) * cr) + y\r\n  const cx2 = (Math.cos(degtorad * a1) * cr) + x\r\n  const cy2 = (-Math.sin(degtorad * a1) * cr) + y\r\n\r\n  return 'M' + x + ' ' + y + ' ' + cx1 + ' ' + cy1 + ' A' + cr + ' ' + cr + ' 0 0 1 ' + cx2 + ' ' + cy2 + 'Z'\r\n}\r\n","/**\r\n * Returns a random number between min (inclusive) and max (exclusive).\r\n */\r\nexport function randomFloat(min: number, max: number) {\r\n  return Math.random() * (max - min) + min\r\n}\r\n\r\n/**\r\n * Returns a random integer between min (inclusive) and max (inclusive).\r\n * The value is no lower than min (or the next integer greater than min\r\n * if min isn't an integer) and no greater than max (or the next integer\r\n * lower than max if max isn't an integer).\r\n */\r\nexport function randomInt(min: number, max: number) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n","import _ from 'lodash'\r\n\r\n/**\r\n * Shuffle all elements except the element at `index`.\r\n */\r\nexport function shuffleExceptAt<T>(array: T[], index: number): T[] {\r\n  const before = array.slice(0, index)\r\n  const after = array.slice(index + 1)\r\n  const shuffled = _.shuffle([...before, ...after])\r\n  const element = array[index]!\r\n  return [\r\n    ...shuffled.slice(0, index),\r\n    element,\r\n    ...shuffled.slice(index),\r\n  ]\r\n}\r\n","import BN from 'bn.js'\r\nimport { Form, Formik } from 'formik'\r\nimport { FC, useContext, useEffect, useRef, useState } from 'react'\r\nimport { Card, Container, InputGroup } from 'react-bootstrap'\r\nimport { useQueryClient } from 'react-query'\r\nimport { Subscription } from 'web3-core-subscriptions'\r\nimport { fromWei, toWei } from 'web3-utils'\r\nimport * as yup from 'yup'\r\nimport { AccountContext, CasinoContext } from '../App'\r\nimport { FormButton, TextField } from '../components/form-fields'\r\nimport { Header } from '../components/Header'\r\nimport { Wheel, WheelRef } from '../components/Wheel'\r\nimport { shuffleExceptAt } from '../utils/collections'\r\n\r\n\r\nconst casinoWheelSchema = yup.object({\r\n  amount: yup.number().moreThan(0).required(),\r\n})\r\n\r\nexport const CasinoWheelPage: FC = () => {\r\n  const account = useContext(AccountContext)\r\n  const casino = useContext(CasinoContext)\r\n\r\n  const queryClient = useQueryClient()\r\n\r\n  const [prizes, setPrizes] = useState(['1', '2', '3'])\r\n  const wheelRef = useRef<WheelRef>(null)\r\n\r\n  useEffect(() => {\r\n\r\n    const getPrizes = casino.methods.getPrizes().call().then(function(result){\r\n      console.log(result);\r\n      setPrizes(result)\r\n    })\r\n\r\n    const subscription = casino.events.WheelSpin(async (error, data) => {\r\n      if (error != null) {\r\n        console.error(error)\r\n        return\r\n      }\r\n      console.log(data.returnValues.wonPrizeIndex);\r\n      \r\n      const wonPrizeIndex = new BN(data.returnValues.wonPrizeIndex).toNumber()\r\n     // const potentialPrizes = data.returnValues.prizes.map(p => fromWei(p))\r\n      // Shuffle all prizes except the prize at index `wonPrizeIndex`\r\n      const shuffledPrizes = shuffleExceptAt(data.returnValues.prizes, wonPrizeIndex)\r\n      setPrizes(shuffledPrizes)\r\n      await wheelRef.current?.spinToIndex(wonPrizeIndex, 5)\r\n      await queryClient.invalidateQueries('balance')\r\n    }) as unknown as Subscription<unknown>\r\n    return () => {\r\n      subscription.unsubscribe()\r\n    }\r\n  }, [casino.events, queryClient])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Container className=\"mt-4 d-flex justify-content-center\">\r\n        <div style={{ maxWidth: '700px' }}>\r\n          <Card>\r\n            <Card.Header as=\"h3\">\r\n              Spin the Wheel! Enter amount and spin\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <Formik\r\n                initialValues={{ amount: '0.05' }}\r\n                validationSchema={casinoWheelSchema}\r\n                onSubmit={async ({ amount }, { resetForm }) => {\r\n                  await casino.methods.spinWheel().send({ from: account, value: toWei(amount) })\r\n                  resetForm()\r\n                }}\r\n              >\r\n                {() => (\r\n                  <Form>\r\n                    <TextField\r\n                      name=\"amount\"\r\n                      label=\"Bet amount\"\r\n                      placeholder=\"Enter your bet\"\r\n                      disabled\r\n                      append={<InputGroup.Text>BNB</InputGroup.Text>}\r\n                    />\r\n                    <FormButton>Spin the wheel</FormButton>\r\n                  </Form>\r\n                )}\r\n              </Formik>\r\n              <div className=\"d-flex justify-content-center\">\r\n                <Wheel ref={wheelRef} prizes={prizes} />\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </div>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n","import { createContext, FC } from 'react'\r\nimport { useQuery } from 'react-query'\r\nimport Web3 from 'web3'\r\nimport { Casino as CasinoType } from './types/casino'\r\nimport Casino from './contracts/casino.json'\r\nimport { getWeb3 } from './getWeb3'\r\nimport { CasinoWheelPage } from './pages/CasinoWheelPage'\r\nimport { AbiItem } from 'web3-utils'\r\n\r\nexport const Web3Context = createContext(undefined as unknown as Web3)\r\nexport const AccountContext = createContext(undefined as unknown as string)\r\nexport const CasinoContext = createContext(undefined as unknown as CasinoType)\r\n\r\nexport const App: FC = () => {\r\n  const web3Loader = useQuery('web3', async () => {\r\n    const web3 = await getWeb3()\r\n    const accounts = await web3.eth.getAccounts()\r\n    const account = accounts[0]\r\n\r\n    \r\n    //const deployedNetwork = Casino.networks[networkId]\r\n    const casino = new web3.eth.Contract(\r\n     \r\n      Casino.abi  as AbiItem[],\r\n      \"0x3A88c9D0973D7f0AD12491f376D3BcB2B6Fc6472\",\r\n    ) as unknown as CasinoType\r\n\r\n    return {\r\n      web3,\r\n      account,\r\n      casino,\r\n    }\r\n  })\r\n\r\n  if (web3Loader.isLoading) {\r\n    return <div>Loading web3...</div>\r\n  }\r\n  if (!web3Loader.isSuccess) {\r\n    return <div>Error loading web3</div>\r\n  }\r\n\r\n  const { web3, account, casino } = web3Loader.data\r\n\r\n  if (account == null) {\r\n    return <div>No account connected</div>\r\n  }\r\n\r\n  return (\r\n    <Web3Context.Provider value={web3}>\r\n      <AccountContext.Provider value={account}>\r\n        <CasinoContext.Provider value={casino}>\r\n          <CasinoWheelPage />\r\n        </CasinoContext.Provider>\r\n      </AccountContext.Provider>\r\n    </Web3Context.Provider>\r\n  )\r\n}\r\n","import Web3 from 'web3'\r\n\r\nexport function getWeb3() {\r\n  return new Promise<Web3>((resolve, reject) => {\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if ((window as any).ethereum) {\r\n        const web3 = new Web3((window as any).ethereum)\r\n        try {\r\n          // Request account access if needed\r\n          await (window as any).ethereum.enable()\r\n          // Accounts now exposed\r\n          resolve(web3)\r\n        } catch (error) {\r\n          reject(error)\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if ((window as any).web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = (window as any).web3\r\n        console.log(\"Injected web3 detected.\")\r\n        resolve(web3)\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"https://data-seed-prebsc-1-s1.binance.org:8545/\"\r\n        )\r\n        const web3 = new Web3(provider)\r\n        console.log(\"No web3 instance injected, using Local web3.\")\r\n        resolve(web3)\r\n      }\r\n    })\r\n  })\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.min.css'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter ,HashRouter } from 'react-router-dom';\r\nimport { QueryClient, QueryClientProvider } from 'react-query'\r\nimport { App } from './App'\r\nimport './index.css'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\n\r\nconst queryClient = new QueryClient()\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n     <BrowserRouter basename=\"/\">\r\n     <QueryClientProvider client={queryClient}>\r\n      <App />\r\n    </QueryClientProvider>\r\n     </BrowserRouter>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}